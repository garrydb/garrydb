<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GarryDB.Platform</name>
    </assembly>
    <members>
        <member name="T:GarryDB.Platform.Actors.AkkaPluginContext">
            <summary>
                The plugin context that uses Akka.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.AkkaPluginContext.#ctor(Akka.Actor.IActorRef,GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Actors.AkkaPluginContext" />.
            </summary>
            <param name="pluginsActor">The reference to the plugins actor.</param>
            <param name="pluginIdentity">The identity of the plugin.</param>
        </member>
        <member name="M:GarryDB.Platform.Actors.AkkaPluginContext.SendAsync(System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Actors.AkkaPluginContextFactory">
            <summary>
                Creates a <see cref="T:GarryDB.Plugins.PluginContext" /> to use with Akka.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.AkkaPluginContextFactory.#ctor(Akka.Actor.IActorRef)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Actors.AkkaPluginContextFactory" />.
            </summary>
            <param name="pluginsActor">The actor reference to the plugins actor.</param>
        </member>
        <member name="T:GarryDB.Platform.Actors.DeadletterMonitor">
            <summary>
                Monitors deadletters in the Akka.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.DeadletterMonitor.#ctor">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Actors.DeadletterMonitor" />.
            </summary>
        </member>
        <member name="T:GarryDB.Platform.Actors.PluginActor">
            <summary>
                The actor responsible for a plugins.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.PluginActor.#ctor(GarryDB.Plugins.Plugin)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Actors.PluginActor" />.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:GarryDB.Platform.Actors.PluginActor.Props(GarryDB.Plugins.Plugin)">
            <summary>
                Create the <see cref="T:GarryDB.Platform.Actors.PluginActor" />.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>The configuration object for creating <see cref="T:GarryDB.Platform.Actors.PluginActor" />.</returns>
        </member>
        <member name="T:GarryDB.Platform.Actors.PluginContextFactory">
            <summary>
                Creates a <see cref="T:GarryDB.Plugins.PluginContext" /> for a <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.PluginContextFactory.Create(GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Create the <see cref="T:GarryDB.Plugins.PluginContext" /> for <paramref name="pluginIdentity" />.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <returns>A <see cref="T:GarryDB.Plugins.PluginContext" />.</returns>
        </member>
        <member name="T:GarryDB.Platform.Actors.PluginsActor">
            <summary>
                The actor responsible for all plugins.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.PluginsActor.#ctor">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Actors.PluginsActor" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Actors.PluginsActor.Props">
            <summary>
                Create the <see cref="T:GarryDB.Platform.Actors.PluginsActor" />.
            </summary>
            <returns>The configuration object for creating <see cref="T:GarryDB.Platform.Actors.PluginsActor" />.</returns>
        </member>
        <member name="T:GarryDB.Platform.Extensions.AssemblyNameExtensions">
            <summary>
                Extends <see cref="T:System.Reflection.AssemblyName" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Extensions.AssemblyNameExtensions.IsCompatibleWith(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
                Determines whether <paramref name="compatibleWith" /> can be used instead of <paramref name="assemblyName" />.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName" /> to check.</param>
            <param name="compatibleWith">The <see cref="T:System.Reflection.AssemblyName" /> of check compatibility with.</param>
            <returns>
                <c>true</c> if <paramref name="assemblyName" /> is compatible with <paramref name="compatibleWith" />,
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Extensions.EnumerableExtensions">
            <summary>
                Extends <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Execute <paramref name="action" /> on each item in <paramref name="enumerable" />.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
            <param name="action">The actino to execute.</param>
            <typeparam name="T">The type of the items in <paramref name="enumerable" />.</typeparam>
        </member>
        <member name="M:GarryDB.Platform.Extensions.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Concatenates <paramref name="item" /> to the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to concatenate the <paramref name="item" /> to.</param>
            <param name="item">The item to concatenate.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> where <paramref name="item" /> is added,
                unless <paramref name="item" /> is <c>null</c>.
            </returns>
        </member>
        <member name="M:GarryDB.Platform.Extensions.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Produces an <see cref="T:System.Collections.Generic.IEnumerable`1" /> without <paramref name="item" />.
            </summary>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to exclude the <paramref name="item" /> from.</param>
            <param name="item">The item to exclude.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> where <paramref name="item" /> is excluded</returns>
        </member>
        <member name="T:GarryDB.Platform.Extensions.ObjectExtensions">
            <summary>
                Extends <see cref="T:System.Object" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Extensions.ObjectExtensions.AsEnumerable``1(``0)">
            <summary>
                Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing <paramref name="item" />.
            </summary>
            <param name="item">The item.</param>
            <typeparam name="T">The type of the item.</typeparam>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing <paramref name="item" />,
                or an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> if <paramref name="item" /> is <c>null</c>.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Extensions.TypeExtensions">
            <summary>
                Extends <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Extensions.TypeExtensions.IsPluginType(System.Type)">
            <summary>
                Determines whether <paramref name="type" /> is a plugin.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if it is a plugin, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GarryDB.Platform.Extensions.TypeExtensions.FindConfigurationType(System.Type)">
            <summary>
                Find the type of the configuration class for <see cref="T:GarryDB.Plugins.ConfigurablePlugin`1" />.
            </summary>
            <param name="pluginType">The plugin type.</param>
            <returns>
                The type of the configuration class if the plugin is a <see cref="T:GarryDB.Plugins.ConfigurablePlugin`1" />.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Garry">
            <summary>
                The Garry.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Garry.#ctor(GarryDB.Platform.Infrastructure.FileSystem,GarryDB.Platform.Persistence.ConnectionFactory)">
            <summary>
                Initializes <see cref="T:GarryDB.Platform.Garry" />.
            </summary>
            <param name="fileSystem"></param>
            <param name="connectionFactory">The connectino factory.</param>
        </member>
        <member name="E:GarryDB.Platform.Garry.PluginLoading">
            <summary>
                Raised when a <see cref="T:GarryDB.Plugins.Plugin" /> is being loaded.
            </summary>
        </member>
        <member name="E:GarryDB.Platform.Garry.Starting">
            <summary>
                Raised when Garry is about to start.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Garry.Start(System.String)">
            <summary>
                Start <see cref="T:GarryDB.Platform.Garry" /> and load the plugins from the <paramref name="pluginsDirectory" />.
            </summary>
            <param name="pluginsDirectory">The directory containing the plugins.</param>
        </member>
        <member name="M:GarryDB.Platform.Garry.Dispose">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Infrastructure.FileSystem">
            <summary>
                Interacts with the file system.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Infrastructure.FileSystem.GetFiles(System.String,System.String)">
            <summary>
                Returns the full paths of the files in the <paramref name="directory" /> that matches <paramref name="pattern" />.
            </summary>
            <param name="directory">The directory to search.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>The files in the <paramref name="directory" /> that matches <paramref name="pattern" />.</returns>
        </member>
        <member name="M:GarryDB.Platform.Infrastructure.FileSystem.GetTopLevelDirectories(System.String)">
            <summary>
                Returns the full paths of the directories found in <paramref name="directory" />.
            </summary>
            <param name="directory">The directory to search.</param>
            <returns>The directories in <paramref name="directory" />.</returns>
        </member>
        <member name="M:GarryDB.Platform.Infrastructure.FileSystem.Exists(System.String)">
            <summary>
                Determines whether a directory or file exists at <paramref name="path" />.
            </summary>
            <param name="path">The path to check.</param>
            <returns><c>true</c> if the directory or file exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GarryDB.Platform.Infrastructure.FileSystem.CreateDirectory(System.String)">
            <summary>
                Create the directory.
            </summary>
            <param name="directory">The directory to create.</param>
        </member>
        <member name="T:GarryDB.Platform.Messaging.Address">
            <summary>
                The address to a handler of a plugin.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Messaging.Address.#ctor(GarryDB.Platform.Plugins.PluginIdentity,System.String)">
            <summary>
                Intializes a new <see cref="T:GarryDB.Platform.Messaging.Address" />.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <param name="handler">The name of the handler.</param>
        </member>
        <member name="P:GarryDB.Platform.Messaging.Address.PluginIdentity">
            <summary>
                Gets the identity of the plugin.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Messaging.Address.Handler">
            <summary>
                Gets the name of the handler.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Messaging.Address.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Messaging.Address.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Messaging.Address.ToString">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Messaging.MessageEnvelope">
            <summary>
                Wrapped around a message and contains metadata about that message.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Messaging.MessageEnvelope.#ctor(GarryDB.Platform.Plugins.PluginIdentity,GarryDB.Platform.Messaging.Address)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Messaging.MessageEnvelope" />.
            </summary>
            <param name="sender">The sender of the message.</param>
            <param name="destination">The destination of the message.</param>
        </member>
        <member name="M:GarryDB.Platform.Messaging.MessageEnvelope.#ctor(GarryDB.Platform.Plugins.PluginIdentity,GarryDB.Platform.Messaging.Address,System.Object)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Messaging.MessageEnvelope" />.
            </summary>
            <param name="sender">The sender of the message.</param>
            <param name="destination">The destination of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:GarryDB.Platform.Messaging.MessageEnvelope.Destination">
            <summary>
                Gets the destination of the message.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Messaging.MessageEnvelope.Message">
            <summary>
                Gets the message.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Messaging.MessageEnvelope.CreateReturnMessage(System.Object)">
            <summary>
                Create a <see cref="T:GarryDB.Platform.Messaging.MessageEnvelope" /> containing a response for the original sender.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A <see cref="T:GarryDB.Platform.Messaging.MessageEnvelope" /> containing the message and is addressed to the sender.</returns>
        </member>
        <member name="T:GarryDB.Platform.Messaging.Messages.PluginLoaded">
            <summary>
                The message that is sent when a <see cref="T:GarryDB.Plugins.Plugin" /> has been loaded.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Messaging.Messages.PluginLoaded.#ctor(GarryDB.Platform.Plugins.PluginIdentity,GarryDB.Plugins.Plugin)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Messaging.Messages.PluginLoaded" />.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="P:GarryDB.Platform.Messaging.Messages.PluginLoaded.PluginIdentity">
            <summary>
                Gets the identity of the plugin.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Messaging.Messages.PluginLoaded.Plugin">
            <summary>
                Gets the plugin.
            </summary>
        </member>
        <member name="T:GarryDB.Platform.Persistence.ConnectionFactory">
            <summary>
                Opens and closes connections to a SQLite database.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Persistence.ConnectionFactory.Open(System.String)">
            <summary>
                Open a connection to the database named <paramref name="databaseName" />.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A connectino to the database.</returns>
        </member>
        <member name="M:GarryDB.Platform.Persistence.ConnectionFactory.Close(SQLite.SQLiteConnection)">
            <summary>
                Close the <paramref name="connection" />.
            </summary>
            <param name="connection">The connection to close.</param>
        </member>
        <member name="T:GarryDB.Platform.Persistence.PersistentSqLiteConnectionFactory">
            <summary>
                Creates <see cref="T:SQLite.SQLiteConnection" />s where the database is stored on disk.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Persistence.PersistentSqLiteConnectionFactory.#ctor(GarryDB.Platform.Infrastructure.FileSystem,System.String)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Persistence.PersistentSqLiteConnectionFactory" />.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="databasePath">The path where the databases should be stored.</param>
        </member>
        <member name="M:GarryDB.Platform.Persistence.PersistentSqLiteConnectionFactory.Open(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Persistence.PersistentSqLiteConnectionFactory.Close(SQLite.SQLiteConnection)">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Plugins.Configuration.ConfigurationTable">
            <summary>
                The table with the configuration of plugins.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.Configuration.ConfigurationTable.Id">
            <summary>
                Gets and sets the id of the record.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.Configuration.ConfigurationTable.Plugin">
            <summary>
                Gets and sets the name of the plugin.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.Configuration.ConfigurationTable.Configuration">
            <summary>
                Gets and sets the configuration as JSON.
            </summary>
        </member>
        <member name="T:GarryDB.Platform.Plugins.Configuration.PluginConfigurationStorage">
            <summary>
                Handles the loading and saving of the configuration for plugins.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.Configuration.PluginConfigurationStorage.#ctor(GarryDB.Platform.Persistence.ConnectionFactory,GarryDB.Platform.Plugins.PluginRegistry)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Plugins.Configuration.PluginConfigurationStorage" />.
            </summary>
            <param name="connectionFactory">The connection factory for creating database connections.</param>
            <param name="pluginRegistry">The registry of plugins.</param>
        </member>
        <member name="M:GarryDB.Platform.Plugins.Configuration.PluginConfigurationStorage.FindConfiguration(GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Find the configuration for the plugin.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <returns>
                The configuration, or <c>null</c> if the plugin is not a <see cref="T:GarryDB.Plugins.ConfigurablePlugin`1" />.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Plugins.Extensions.AssemblyLoadContextExtensions">
            <summary>
                Extends <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.Extensions.AssemblyLoadContextExtensions.TryLoad(System.Runtime.Loader.AssemblyLoadContext,System.Reflection.AssemblyName,System.Reflection.Assembly@)">
            <summary>
                Tries to load <paramref name="name" /> from the specified <paramref name="assemblyLoadContext" />.
            </summary>
            <param name="assemblyLoadContext">The assembly load context.</param>
            <param name="name">The <see cref="T:System.Reflection.AssemblyName" /> of the assembly to load.</param>
            <param name="assembly">
                The loaded <see cref="T:System.Reflection.Assembly" />, or <c>null</c> if the <paramref name="assemblyLoadContext" /> can't load it.
            </param>
            <returns><c>true</c> if the loading has been successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:GarryDB.Platform.Plugins.Extensions.PluginExtensions">
            <summary>
                Extends <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.Extensions.PluginExtensions.FindConfigurationType(GarryDB.Plugins.Plugin)">
            <summary>
                Find the configuration type for the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>
                The type of the configuration, or <c>null</c> if the plugin
                is not a <see cref="T:GarryDB.Plugins.ConfigurablePlugin`1" />.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Plugins.PluginAssembly">
            <summary>
                The assembly containing the <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginAssembly.#ctor(System.Reflection.Assembly)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Plugins.PluginAssembly" />.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> containing the plugin.</param>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginAssembly.StartupOrder">
            <summary>
                Gets the startup order.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginAssembly.PluginType">
            <summary>
                Gets the full name of the plugin type.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginAssembly.PluginIdentity">
            <summary>
                Gets the identity of the plugin.
            </summary>
        </member>
        <member name="T:GarryDB.Platform.Plugins.PluginDirectory">
            <summary>
                Contains information about the directory where a <see cref="T:GarryDB.Plugins.Plugin" /> is stored.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginDirectory.#ctor(GarryDB.Platform.Infrastructure.FileSystem,System.String)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Plugins.PluginDirectory" />.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="directory">The directory containing the plugin.</param>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginDirectory.PluginName">
            <summary>
                Gets the name of the plugin.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginDirectory.Directory">
            <summary>
                Gets the directory where the plugin is stored.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginDirectory.IsDependentOn(GarryDB.Platform.Plugins.PluginDirectory)">
            <summary>
                Determins whether this <see cref="T:GarryDB.Platform.Plugins.PluginDirectory" /> is dependent on <paramref name="pluginDirectory" />.
            </summary>
            <param name="pluginDirectory">The <see cref="T:GarryDB.Platform.Plugins.PluginDirectory" /> to check.</param>
            <returns>
                <c>true</c> if this plugin depends on assemblies provided by <paramref name="pluginDirectory" />,
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginDirectory.LoadInto(GarryDB.Platform.Plugins.PluginLoadContext)">
            <summary>
                Load the plugin into <paramref name="pluginLoadContext" />.
            </summary>
            <param name="pluginLoadContext">The plugin load context to load the assemblies into.</param>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginDirectory.CompareTo(GarryDB.Platform.Plugins.PluginDirectory)">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginDirectory.ToString">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Plugins.PluginIdentity">
            <summary>
                The identity of a <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.#ctor(System.String,System.String)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="version">The version of the plugin.</param>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginIdentity.Name">
            <summary>
                Gets the name of the plugin.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.ToString">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.Parse(System.String)">
            <summary>
                Parse the string into a valid <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.
            </summary>
            <param name="value">The string to parse.</param>
            <returns>The <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.</returns>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.op_Equality(GarryDB.Platform.Plugins.PluginIdentity,GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Determines whether two instances of <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" /> represent the same <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.
            </summary>
            <param name="a">The first <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.</param>
            <param name="b">The second <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> is the same <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" /> as <paramref name="b" />,
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginIdentity.op_Inequality(GarryDB.Platform.Plugins.PluginIdentity,GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Determines whether two instances of <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" /> represent a different <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.
            </summary>
            <param name="a">The first <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.</param>
            <param name="b">The second <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" />.</param>
            <returns>
                <c>true</c> if <paramref name="a" /> is different <see cref="T:GarryDB.Platform.Plugins.PluginIdentity" /> as <paramref name="b" />,
                otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:GarryDB.Platform.Plugins.PluginLoadContext">
            <summary>
                A dedicated <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> for loading assemblies for a <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginLoadContext.#ctor(GarryDB.Platform.Plugins.PluginDirectory,System.Collections.Generic.IEnumerable{System.Runtime.Loader.AssemblyLoadContext})">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Plugins.PluginLoadContext" />.
            </summary>
            <param name="pluginDirectory">The directory containing the .dlls.</param>
            <param name="providers">The <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />s to use for referenced assemblies.</param>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginLoadContext.PluginDirectory">
            <summary>
                Gets the plugin directory.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginLoadContext.Load">
            <summary>
                Loads the assembly that contains a <see cref="T:GarryDB.Plugins.Plugin" />.
            </summary>
            <returns>The <see cref="T:GarryDB.Platform.Plugins.PluginAssembly" />.</returns>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginLoadContext.Load(System.Reflection.AssemblyName)">
            <inheritdoc />
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginLoadContext.LoadUnmanagedDll(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Plugins.PluginRegistry">
            <summary>
                A registry containing all loaded <see cref="T:GarryDB.Plugins.Plugin" />s.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginRegistry.#ctor(GarryDB.Platform.Actors.PluginContextFactory)">
            <summary>
                Intializes a new <see cref="T:GarryDB.Platform.Plugins.PluginRegistry" />.
            </summary>
            <param name="pluginContextFactory">The factory for creating a <see cref="T:GarryDB.Plugins.PluginContext" />.</param>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginRegistry.Load(GarryDB.Platform.Plugins.PluginLoadContext)">
            <summary>
                Load the plugin from the <paramref name="pluginLoadContext" />.
            </summary>
            <param name="pluginLoadContext">The plugin load context.</param>
        </member>
        <member name="P:GarryDB.Platform.Plugins.PluginRegistry.Item(GarryDB.Platform.Plugins.PluginIdentity)">
            <summary>
                Gets the <see cref="T:GarryDB.Plugins.Plugin" /> based on the identity.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <returns>The plugin, or <c>null</c> if the plugin can't be found.</returns>
        </member>
        <member name="M:GarryDB.Platform.Plugins.PluginRegistry.Dispose">
            <inheritdoc />
        </member>
        <member name="T:GarryDB.Platform.Startup.PluginLoading">
            <summary>
                Is raised when a plugin is being loaded.
            </summary>
        </member>
        <member name="M:GarryDB.Platform.Startup.PluginLoading.#ctor(GarryDB.Platform.Plugins.PluginIdentity,System.Int32)">
            <summary>
                Initializes a new <see cref="T:GarryDB.Platform.Startup.PluginLoading" />.
            </summary>
            <param name="pluginIdentity">The identity of the plugin.</param>
            <param name="totalNumberOfPlugins">The total number of plugins.</param>
        </member>
        <member name="P:GarryDB.Platform.Startup.PluginLoading.PluginIdentity">
            <summary>
                Gets the identity of the plugin.
            </summary>
        </member>
        <member name="P:GarryDB.Platform.Startup.PluginLoading.TotalNumberOfPlugins">
            <summary>
                Gets the total number of steps.
            </summary>
        </member>
    </members>
</doc>
